syntax = "proto3";

package types;

// import "github.com/coreos/etcd/raft/raftpb/raft.proto";
import weak "gogoproto/gogo.proto";

option (gogoproto.populate_all) = true;
option (gogoproto.testgen_all) = true;
option (gogoproto.gostring_all) = true;
option (gogoproto.equal_all) = true;
option (gogoproto.verbose_equal_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_getters_all) = false;

//service Raft {
//    rpc  ProcessRaftMessage(ProcessRaftMessageRequest) returns (ProcessRaftMessageReponse) {};
//
//    rpc ResolveAddress(ResolveAddressRequest) returns (ResolveAddressReponse) {};
//}
//
//message RaftMember {
//    uint64 raft_id = 1 [(gogoproto.customname) = "RaftID"];
//    string node_id = 2 [(gogoproto.customname) = "NodeID"];
//    string addr = 3;
//    RaftMemberStatus status = 4 [(gogoproto.nullable) = false];
//}
//
//message RaftMemberStatus {
//	bool leader = 1;
//
//	enum Reachability {
//		UNKNOWN = 0;
//		UNREACHABLE = 1;
//		REACHABLE = 2;
//	}
//
//	Reachability reachability = 2;
//	string message = 3;
//}
//
//message JoinRequest {
//    string addr = 1;
//}
//
//message JoinResponse {
//    uint64 raft_id = 1 [(gogoproto.customname) = "RaftID"];
//    repeated RaftMember members = 2;
//    repeated uint64 removed_members = 3;
//}
//
//message LeaveRequest {
//    RaftMember node = 1;
//}
//
//message LeaveResponse {}
//
//message ProcessRaftMessageRequest {
//    raftpb.Message message = 1;
//}
//
//message ProcessRaftMessageReponse {}
//
//message ResolveAddressRequest {
//    uint64 raft_id = 1 [(gogoproto.customname) = "RaftID"];
//}
//
//message ResolveAddressReponse {
//    string addr = 1;
//}
//
message InternalRaftRequest {
    uint64 id = 1 [(gogoproto.customname) = "ID"];

    repeated StoreAction action = 2;
}

enum StoreActionKind {
    option (gogoproto.goproto_enum_prefix) = false;
    option (gogoproto.enum_customname) = "StoreActionKind";
    UNKNOWN = 0 [(gogoproto.enumvalue_customname) = "StoreActionKindUnkonwn"];
    STORE_ACTION_CREATE = 1 [(gogoproto.enumvalue_customname) = "StoreActionKindCreate"];
    STORE_ACTION_UPDATE = 2 [(gogoproto.enumvalue_customname) = "StoreActionKindUpdate"];
    STORE_ACTION_REMOVE = 3 [(gogoproto.enumvalue_customname) = "StoreActionKindRemove"];
}

message StoreAction {
    StoreActionKind action = 1;
    oneof target {
        Node node = 2;
        Cluster cluster = 3;
    }
}

message Node {
    string id = 1 [(gogoproto.customname) = "ID"];
    string description = 2;
}

message Cluster {
    string id = 1 [(gogoproto.customname) = "ID"];
    string description = 2;
}
